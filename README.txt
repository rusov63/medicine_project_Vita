ТЗ проекта для реализации соискателем на должность инженера-программиста.

Задание 1.

Описание проекта. Для реализации проекта требуется:
1. изучить материал темы (гуглим, изучаем подходящий материал),
по возможности консультируемся со специалистом данной темы;
2. схематично на бумаге набрасывем будущие таблицы;
3. компонуем и реализовываем проект с помощью PostgreSQL;
4. Тестируем БД.


Необходимые структуры данных.
Для реализации тестового проекта использовал реляционную базу данных PostgreSQL,
графическую программу Pgadmin, Pycharm, Python 3.11, git, командную строку.

Создаем БД "Справочник медикаментов" Medicine_directory и пять таблиц:
- первая таблица Действующее вещество - "active_substance".

- вторая таблица Список лекарств - "list_medications"
отношение между первой и второй таблицей "многие ко многим" так как одна таблица ссылается на другую и наоборот,
 одно лекарственное средство может включать несколько действующих веществ, а действующее вещество
может быть компонентом нескольких лекарственных средств.

- третья таблица была создана для связи первой и второй таблицы - "ActiveSubstance_ListMedications".

- четвертая таблица Категории "category" была связана отношением "многие ко многим" с второй таблицей,
так как одна категория может связана с нескольким лекарственными стредствами, и наоборот.

- пятая таблица была создана для связи между второй и четвертой - ListMedications_Category.

Типы полей, ключевые поля, команды для создания, наполнения таблиц смотрите файл - create_table.sql

Синтаксис.
Для сортировки, фильтрации, удаления, переименования таблиц, сморите файл - syntax_table.sql

Вывод.
Проектирование базы данных - это создание структуры, позволяющей эффективно хранить и обрабатывать
данные, то есть быстро отвечать на запросы и экономить места на диске. Для этого обязательно
надо соблюдать несколько правил: составлять концептуальную модель БД (абстрасктное описание БД), обязательно описывать
все ключи, определять типы данных, описывать логические ограничения, делать нормализацию
(устранение избыточности данных в БД).

В данном проекте представлена ER-диаграмма (смотрите файл medicine_directory.png). На диаграмме изображены
сущности и связи между ними. ЧТобы не усложнять тестовое задание и не реализовывать множество дополнительных
возможностей, я посчитал, что связь между таблицами "многие ко многим" самый оптимальный вариант связей между ними.

Для улучшения БД (если бы не ограниченное время на выполнение тестового задания) я бы пересмотрел
типы полей, посчитал бы, сколько нужно байтов каждому полю, (например таблицу Category поле category), тем
самым снизил время отклика. Для поля description таблицы list_medications возможно поле вынес бы в отдельную таблицу,
так как при запросе, пользователь не всегда смотрит описание препарата.


Задание 2.
Пишу на языке Python, Python разработчик должен постоянно учиться и совершенствоваться в
написании кода. Для меня всегда было и будет приоритетным стремлением к написанию "чистого кода".
Чистый код должен читаться, как хорошо написаная проза! Конечно, чтение чистого кода никогда не сравнится с чтением
"Властелина колец". Чистый код, как и хорошая повесть, должна наглядно раскрывать интригу решаемой задачи над
которой тщательно поработали, не пожалев своего времени, чтобы сделать его изящным.


Задача из курса "Практикум по математике и Python" надо было написать задачу по реализации "Постоянная Капрекара", это
число, равное 6174. Оно обладает следующим свойством: если выбрать любое четырёхзначное число больше 1000, в котором
не все цифры одинаковы, расположить цифры сначала в порядке возрастания, затем в порядке убывания и
вычесть из большего меньшее, то не более чем за семь шагов получится число 6174, которое будет затем
воспроизводить само себя.

Реализация кода смотрите файл kaprekar_constant.py







